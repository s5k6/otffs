
`otfFS` — File system of on-the-fly test data
=============================================

Goal
----

Provide arbitrarily large files of pseudo-random test data, without
consuming disk space.

Use case:

    $ curl 'http://localhost:8080/mnt/data3' | cmp - ./mnt/data3

You don't want to create these files on your SSD:

    $ ls -l mnt
    -r--r--r-- 1 sk users 4.1k Jan  1 21:09 data1
    -r--r--r-- 1 sk users 4.2M Jan  1 21:09 data2
    -r--r--r-- 1 sk users 4.3G Jan  1 21:09 data3
    -r--r--r-- 1 sk users 4.4T Jan  1 21:09 data4
    -r--r--r-- 1 sk users 4.6P Jan  1 21:09 data5

Plan: Use FUSE [1] to provide a file system, which is backed by an
executable instead of disk space.  Reading from a file in this
on-the-fly FS delivers test data, which may be generated
algorithmically, or be provided by a concatenation of sufficiently
many copies of a given source file.  Thus, every read at the same
offset of the same file will produce the same data.


Using it
--------

    $ make

Create mountpoint directory, and create a config file maned `otffsrc`
below that.  Maybe add further source files.  An example directory
`mnt/otffsrc` is provided.  To use it, do:

    $ ls -l -h mnt/
    total 8.0K
    -rw------- 1 sk users 1.2K Jan 11 16:33 otffsrc
    -rw------- 1 sk users  455 Jan 11 18:38 template

    $ ./otffs ./mnt

Open a second terminal, and

    $ ls -l -h mnt/
    total 8.1E
    -rw------- 1 sk users 8.0E Jan 11 18:38 excessive
    -rw------- 1 sk users 2.3K Jan 11 18:38 five
    -rw------- 1 sk users  16G Jan 15 22:03 integers
    -rw------- 1 sk users 1.3G Jan 11 18:38 large
    -rw-r----- 1 sk users  128 Jan 11 18:38 shorter
    -rw------- 1 sk users  455 Jan  1  1970 template

To umount, do

    $ fusermount -u mnt/

    $ ls -l -h mnt/
    total 8.0K
    -rw------- 1 sk users 1.2K Jan 11 16:33 otffsrc
    -rw------- 1 sk users  455 Jan 11 18:38 template


The general format of `otffsrc` is a sequence of <line>s, matching

    <line> ::= <filename> `:` <how to produce it> (, <option>*)
   
    <filename> ::= <ascii characters>
   
    <how to produce it> ::= `pass` <source path>
                         |  `fill` <algorithm>
   
    <algorithm> ::= `integers`
   
    <option> ::= `mtime` {decimal integer, seconds since epoch}
              |  `mode` {three octal digits}
              |  `size` {decimal integer}<suffix>?
   
    <suffix> ::= `k` | `M` | `G` | `T` | `P` | `E`
               | `ki` | `Mi` | `Gi` | `Ti` | `Pi` | `Ei`
               | `x`


Common error messages
---------------------

Compilation:

  * “Package fuse3 was not found in the pkg-config search path.
    Perhaps you should add the directory containing `fuse3.pc' to the
    PKG_CONFIG_PATH environment variable”

    or

    “fuse_lowlevel.h: No such file or directory”

    You need to have the header files for fuse3 installed.  And of
    course your kernel must support FUSE.

Runtime:

  * “fuse: device not found, try 'modprobe fuse' first”

    Have you upgraded the kernel?  Reboot.

  * “The source `foo` is too short (29B).  Request of 65536B for `bar`
    needs IOVEC of size 2260, limit is 1024!”

    Reading from fake file `bar` sent a read(2) request to the file
    system, asking for 65536 bytes.  So we need to concatenate 2260
    copies of source file `foo`.  Your system cannot do that
    efficiently, and I have not implemented the less efficient method.
    See readv(2) and look for `IOV_MAX`.  You can solve this problem
    by providing a source `foo` for which

                             max amount of data req'd by read
        filesize of foo  >  ----------------------------------
                                        IOV_MAX

    holds.

  * “cannot access 'mnt': Transport endpoint is not connected”

    The `otffs` process crashed, abd the OS still thinks the
    mountpoint is mounted.  Umount the mountpoint, using

        $ fusermount -u mnt


Learning from others
====================

    $ https://github.com/libfuse/libfuse.git
    $ cd libfuse/example/
    $ gcc -Wall hello.c $(pkg-config fuse3 --cflags --libs) -o hello

Make mountpoint `mnt`.  Run in foreground (`-f`), and set user and
group from the `mnt` directory.  Maybe do this in a separate terminal:

    $ mkdir mnt
    $ ./hello -f $(stat -c '-o uid=%u -o gid=%g' mnt) mnt

Umounting is by terminating the program (through an exit handler it
has installed), or through

    $ fusermount -u mnt



____________________
[1] https://github.com/libfuse/libfuse/
